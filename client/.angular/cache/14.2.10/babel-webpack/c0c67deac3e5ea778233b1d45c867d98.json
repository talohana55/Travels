{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { first, forkJoin, map, startWith, tap } from \"rxjs\";\nimport { FadeIn } from \"src/app/core/animations/animations\";\nimport * as moment from \"moment/moment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"src/app/services/http.service\";\nimport * as i4 from \"ng-lazyload-image\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/card\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/forms\";\n\nfunction AddNewFlightComponent_mat_card_content_3_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 16);\n    i0.ɵɵelement(1, \"img\", 17);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const state_r6 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"value\", state_r6.cityName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"lazyLoad\", state_r6.flag)(\"defaultImage\", ctx_r2.defaultImage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", state_r6.cityName, \", \", state_r6.state, \"\");\n  }\n}\n\nfunction AddNewFlightComponent_mat_card_content_3_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 16);\n    i0.ɵɵelement(1, \"img\", 17);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const state_r7 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"value\", state_r7.cityName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"lazyLoad\", state_r7.flag)(\"defaultImage\", ctx_r4.defaultImage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", state_r7.cityName, \", \", state_r7.state, \"\");\n  }\n}\n\nfunction AddNewFlightComponent_mat_card_content_3_mat_form_field_18_mat_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const airline_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", airline_r9.cid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", airline_r9.name, \" \");\n  }\n}\n\nfunction AddNewFlightComponent_mat_card_content_3_mat_form_field_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 2)(1, \"mat-label\");\n    i0.ɵɵtext(2, \"Select Carrier\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-select\", 18);\n    i0.ɵɵtemplate(4, AddNewFlightComponent_mat_card_content_3_mat_form_field_18_mat_option_4_Template, 2, 2, \"mat-option\", 5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.airlines);\n  }\n}\n\nfunction AddNewFlightComponent_mat_card_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card-content\")(1, \"form\", 1);\n    i0.ɵɵlistener(\"ngSubmit\", function AddNewFlightComponent_mat_card_content_3_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.submit());\n    });\n    i0.ɵɵelementStart(2, \"mat-form-field\", 2)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Departure\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 3);\n    i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 4);\n    i0.ɵɵtemplate(8, AddNewFlightComponent_mat_card_content_3_mat_option_8_Template, 4, 5, \"mat-option\", 5);\n    i0.ɵɵpipe(9, \"async\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"mat-form-field\", 2)(11, \"mat-label\");\n    i0.ɵɵtext(12, \"Destination\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 6);\n    i0.ɵɵelementStart(14, \"mat-autocomplete\", null, 7);\n    i0.ɵɵtemplate(16, AddNewFlightComponent_mat_card_content_3_mat_option_16_Template, 4, 5, \"mat-option\", 5);\n    i0.ɵɵpipe(17, \"async\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(18, AddNewFlightComponent_mat_card_content_3_mat_form_field_18_Template, 5, 1, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(19, \"mat-form-field\", 2)(20, \"mat-label\");\n    i0.ɵɵtext(21, \"Departure Datetime\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"input\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"mat-form-field\", 2)(24, \"mat-label\");\n    i0.ɵɵtext(25, \"Arrival Datetime\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(26, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"mat-form-field\", 2)(28, \"mat-label\");\n    i0.ɵɵtext(29, \"Airline Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(30, \"input\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"mat-form-field\", 2)(32, \"mat-label\");\n    i0.ɵɵtext(33, \"Max Capacity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(34, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"mat-form-field\", 2)(36, \"mat-label\");\n    i0.ɵɵtext(37, \"Current Capacity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(38, \"input\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(39, \"mat-form-field\", 2)(40, \"mat-label\");\n    i0.ɵɵtext(41, \"Price per ticket ($)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(42, \"input\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(43, \"button\", 15);\n    i0.ɵɵtext(44);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const _r1 = i0.ɵɵreference(7);\n\n    const _r3 = i0.ɵɵreference(15);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.formGroup);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matAutocomplete\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 8, ctx_r0.fromFilteredStates$));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"matAutocomplete\", _r3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 10, ctx_r0.toFilteredStates$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.airlines);\n    i0.ɵɵadvance(25);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.formGroup.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.newRecord ? \"Create flight\" : \"Update flight\", \" \");\n  }\n}\n\nexport let AddNewFlightComponent = /*#__PURE__*/(() => {\n  class AddNewFlightComponent {\n    constructor(route, snackBar, httpService) {\n      this.route = route;\n      this.snackBar = snackBar;\n      this.httpService = httpService;\n      this.defaultImage = \"assets/logo.png\";\n      this.newRecord = true;\n      this.states = [];\n      this.airlines = [];\n      this.travelRoutes = [];\n    }\n\n    ngOnInit() {\n      const cid = this.route?.firstChild?.snapshot.params[\"cid\"];\n      this.cid = cid;\n\n      if (this.cid) {\n        this.newRecord = false;\n      }\n\n      this.getDataFromServer(cid);\n    }\n\n    getDataFromServer(cid) {\n      let httpArr = [this.httpService.getState(), this.httpService.getTravelRoutes(), this.httpService.getAirlines()];\n\n      if (cid) {\n        httpArr.push(this.httpService.getFlightById(cid));\n      }\n\n      forkJoin(httpArr).pipe(first(), tap(res => this.states = res[0]), tap(res => this.travelRoutes = res[1]), tap(res => this.airlines = res[2].sort((a, b) => a.name.localeCompare(b.name))), tap(res => this.initFormGroup(res[3] ? res[3] : undefined))).subscribe();\n    }\n\n    initFormGroup(flight) {\n      this.formGroup = new FormGroup({\n        departure: new FormControl(flight?.departure ?? \"\", [Validators.required]),\n        destination: new FormControl(flight?.destination ?? \"\", [Validators.required]),\n        carrier_id: new FormControl(flight?.carrier_id ?? \"\", [Validators.required]),\n        departure_datetime: new FormControl(flight?.departure_datetime ? moment(flight?.departure_datetime).toDate().toISOString().slice(0, 16) : undefined, [Validators.required]),\n        arrival_datetime: new FormControl(flight?.arrival_datetime ? moment(flight?.arrival_datetime).toDate().toISOString().slice(0, 16) : undefined, [Validators.required]),\n        airline_type: new FormControl(flight?.airline_type ?? \"\", [Validators.required]),\n        max_capacity: new FormControl(flight?.max_capacity ?? 100, [Validators.required]),\n        current_capacity: new FormControl(flight?.current_capacity ?? 0, [Validators.required]),\n        price_per_ticket: new FormControl(flight?.price_per_ticket ?? \"\", [Validators.required])\n      });\n      this.fromFilteredStates$ = this.formGroup?.get(\"departure\")?.valueChanges.pipe(startWith(\"\"), map(state => state ? this._filterStates(state) : this.states.slice().sort((a, b) => a.cityName.localeCompare(b.cityName))));\n      this.toFilteredStates$ = this.formGroup?.get(\"destination\")?.valueChanges.pipe(startWith(\"\"), map(state => state ? this._filterStates(state) : this.states.slice().sort((a, b) => a.cityName.localeCompare(b.cityName))));\n    }\n\n    _filterStates(value) {\n      const filterValue = value.toLowerCase();\n      return this.states.filter(state => {\n        const cityNameArr = state.cityName.replace(\"-\", \" \").split(\" \").filter(Boolean);\n        const countryArr = state.state.replace(\"-\", \" \").split(\" \").filter(Boolean);\n        return cityNameArr.map(n => n.toLowerCase()).some(n => filterValue.includes(n)) || countryArr.map(n => n.toLowerCase()).some(n => filterValue.includes(n));\n      }).sort((a, b) => a.cityName.localeCompare(b.cityName));\n    }\n\n    submit() {\n      if (this.formGroup.valid) {\n        if (this.newRecord) {\n          this.httpService.createFlight(this.formGroup.value).pipe(first(), tap(res => console.log(res)), tap(res => this.snackBar.open(\"Great! we added the flight successfully!\", undefined, {\n            verticalPosition: \"top\",\n            duration: 3000\n          }))).subscribe();\n        } else {\n          this.httpService.updateFlight({\n            cid: this.cid,\n            ...this.formGroup.value\n          }).pipe(first(), tap(res => console.log(res)), tap(res => this.snackBar.open(\"Great! we updated the flight successfully!\", undefined, {\n            verticalPosition: \"top\",\n            duration: 3000\n          }))).subscribe();\n        }\n      }\n    }\n\n  }\n\n  AddNewFlightComponent.ɵfac = function AddNewFlightComponent_Factory(t) {\n    return new (t || AddNewFlightComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.HttpService));\n  };\n\n  AddNewFlightComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddNewFlightComponent,\n    selectors: [[\"app-add-new-flight\"]],\n    decls: 4,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"aria-label\", \"State\", \"formControlName\", \"departure\", 3, \"matAutocomplete\"], [\"autoFrom\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"aria-label\", \"State\", \"formControlName\", \"destination\", 3, \"matAutocomplete\"], [\"autoTo\", \"matAutocomplete\"], [\"appearance\", \"fill\", 4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"datetime-local\", \"formControlName\", \"departure_datetime\"], [\"matInput\", \"\", \"type\", \"datetime-local\", \"formControlName\", \"arrival_datetime\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"airline_type\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"max_capacity\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"current_capacity\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"price_per_ticket\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"submit\", 3, \"disabled\"], [3, \"value\"], [\"alt\", \"\", \"height\", \"25\", 1, \"option-img\", 3, \"lazyLoad\", \"defaultImage\"], [\"formControlName\", \"carrier_id\"]],\n    template: function AddNewFlightComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-title\");\n        i0.ɵɵtext(2, \"Add new flight\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, AddNewFlightComponent_mat_card_content_3_Template, 45, 12, \"mat-card-content\", 0);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"@fadeIn\", undefined);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.formGroup);\n      }\n    },\n    dependencies: [i4.LazyLoadImageDirective, i5.NgForOf, i5.NgIf, i6.MatAutocomplete, i6.MatAutocompleteTrigger, i7.MatOption, i8.MatFormField, i8.MatLabel, i9.MatInput, i10.MatSelect, i11.MatCard, i11.MatCardContent, i11.MatCardTitle, i12.MatButton, i13.ɵNgNoValidate, i13.DefaultValueAccessor, i13.NumberValueAccessor, i13.NgControlStatus, i13.NgControlStatusGroup, i13.FormGroupDirective, i13.FormControlName, i5.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{min-height:calc(100vh - 128px);display:flex;justify-content:center;align-items:center;overflow-y:auto}mat-card[_ngcontent-%COMP%]{width:100%;height:100%;min-height:500px;max-width:1000px;margin:auto;display:flex;justify-content:center;align-items:center;flex-flow:column}mat-card-title[_ngcontent-%COMP%]{margin:20px 0 0 30px}form[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(3,max-content);gap:0 10px;margin:30px!important}.submit[_ngcontent-%COMP%]{margin-top:20px}\"],\n    data: {\n      animation: [FadeIn(200)]\n    }\n  });\n  return AddNewFlightComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}