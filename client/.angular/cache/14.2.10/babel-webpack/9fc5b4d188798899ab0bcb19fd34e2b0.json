{"ast":null,"code":"import { BehaviorSubject, catchError, EMPTY, map, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, httpClient, snackBar) {\n      this.router = router;\n      this.httpClient = httpClient;\n      this.snackBar = snackBar;\n      this.isLoggedIn = new BehaviorSubject(false);\n      this.isLoggedIn$ = this.isLoggedIn.asObservable();\n      this.loggedInUser = new BehaviorSubject({});\n      this.loggedInUser$ = this.loggedInUser.asObservable();\n    }\n\n    updateLoginStateOnAppLoad() {\n      if (sessionStorage.getItem(\"access_token\")) {\n        this.isLoggedIn.next(true);\n      }\n\n      if (sessionStorage.getItem(\"logged_in_user\")) {\n        const user = sessionStorage.getItem(\"logged_in_user\");\n        this.loggedInUser.next(JSON.parse(user));\n      }\n    }\n\n    login(email, password) {\n      return this.httpClient.post(`${environment.backendBaseUrl}/login`, {\n        email,\n        password\n      }).pipe(tap(() => this.isLoggedIn.next(true)), map(result => {\n        sessionStorage.setItem(\"access_token\", result.token);\n        sessionStorage.setItem(\"logged_in_user\", JSON.stringify(result));\n        this.loggedInUser.next(result);\n      }), catchError(error => {\n        this.snackBar.open(\"Error! no user found for the given credentials\", undefined, {\n          verticalPosition: 'top',\n          duration: 3000\n        });\n        this.isLoggedIn.next(false);\n        this.loggedInUser.next({});\n        console.log(error);\n        return EMPTY;\n      }));\n    }\n\n    register(email, name, phone, password) {\n      return this.httpClient.post(`${environment.backendBaseUrl}/register`, {\n        email,\n        name,\n        phone,\n        password\n      }).pipe(tap(() => this.isLoggedIn.next(true)), map(() => void 0), catchError(error => {\n        this.snackBar.open(\"Error! could not register the user with the given details\", undefined, {\n          verticalPosition: \"top\",\n          duration: 3000\n        });\n        this.isLoggedIn.next(false);\n        console.log(error);\n        return EMPTY;\n      }));\n    }\n\n    logout() {\n      this.router.navigate([\"login\"]).then(() => {\n        sessionStorage.removeItem(\"access_token\");\n        sessionStorage.removeItem(\"logged_in_user\");\n        this.isLoggedIn.next(false);\n        this.loggedInUser.next({});\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.MatSnackBar));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}