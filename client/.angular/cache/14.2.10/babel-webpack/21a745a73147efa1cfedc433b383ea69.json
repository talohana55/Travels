{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"payPalButtonContainer\"];\nlet ScriptService = /*#__PURE__*/(() => {\n  class ScriptService {\n    constructor(zone) {\n      this.zone = zone;\n    }\n\n    registerScript(url, globalVar, onReady) {\n      const existingGlobalVar = window[globalVar];\n\n      if (existingGlobalVar) {\n        // global variable is present = script was already loaded\n        this.zone.run(() => {\n          onReady(existingGlobalVar);\n        });\n        return;\n      } // prepare script elem\n\n\n      const scriptElem = document.createElement('script');\n      scriptElem.id = this.getElemId(globalVar);\n      scriptElem.innerHTML = '';\n\n      scriptElem.onload = () => {\n        this.zone.run(() => {\n          onReady(window[globalVar]);\n        });\n      };\n\n      scriptElem.src = url;\n      scriptElem.async = true;\n      scriptElem.defer = true; // add script to header\n\n      document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n\n    cleanup(globalVar) {\n      // remove script from DOM\n      const scriptElem = document.getElementById(this.getElemId(globalVar));\n\n      if (scriptElem) {\n        scriptElem.remove();\n      }\n    }\n\n    getElemId(globalVar) {\n      return `ngx-paypal-script-elem-${globalVar}`;\n    }\n\n  }\n\n  /** @nocollapse */\n  ScriptService.ɵfac = function ScriptService_Factory(t) {\n    return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n  };\n  /** @nocollapse */\n\n\n  ScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScriptService,\n    factory: ScriptService.ɵfac\n  });\n  return ScriptService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PayPalScriptService = /*#__PURE__*/(() => {\n  class PayPalScriptService {\n    constructor(scriptService) {\n      this.scriptService = scriptService;\n      this.paypalWindowName = 'paypal';\n    }\n\n    registerPayPalScript(config, onReady) {\n      this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n    }\n\n    destroyPayPalScript() {\n      this.scriptService.cleanup(this.paypalWindowName);\n    }\n\n    getUrlForConfig(config) {\n      const params = [{\n        name: 'client-id',\n        value: config.clientId\n      }];\n\n      if (config.locale) {\n        params.push({\n          name: 'locale',\n          value: config.locale\n        });\n      }\n\n      if (config.currency) {\n        params.push({\n          name: 'currency',\n          value: config.currency\n        });\n      }\n\n      if (config.commit) {\n        params.push({\n          name: 'commit',\n          value: config.commit\n        });\n      }\n\n      if (config.vault) {\n        params.push({\n          name: 'vault',\n          value: config.vault\n        });\n      }\n\n      if (config.intent) {\n        params.push({\n          name: 'intent',\n          value: config.intent\n        });\n      }\n\n      if (config.funding) {\n        params.push({\n          name: 'components',\n          value: 'buttons,funding-eligibility'\n        });\n      }\n\n      if (config.extraParams) {\n        params.push(...config.extraParams);\n      }\n\n      return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n    }\n\n    getQueryString(queryParams) {\n      let queryString = '';\n\n      for (let i = 0; i < queryParams.length; i++) {\n        const queryParam = queryParams[i];\n\n        if (i === 0) {\n          queryString += '?';\n        } else {\n          queryString += '&';\n        }\n\n        queryString += `${queryParam.name}=${queryParam.value}`;\n      }\n\n      return queryString;\n    }\n\n  }\n\n  /** @nocollapse */\n  PayPalScriptService.ɵfac = function PayPalScriptService_Factory(t) {\n    return new (t || PayPalScriptService)(i0.ɵɵinject(ScriptService));\n  };\n  /** @nocollapse */\n\n\n  PayPalScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PayPalScriptService,\n    factory: PayPalScriptService.ɵfac\n  });\n  return PayPalScriptService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxPaypalComponent = /*#__PURE__*/(() => {\n  class NgxPaypalComponent {\n    constructor(paypalScriptService, cdr, ngZone) {\n      this.paypalScriptService = paypalScriptService;\n      this.cdr = cdr;\n      this.ngZone = ngZone;\n      /**\r\n       * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n       * sharing base configuration. In such a case only a single component may register script.\r\n       */\n\n      this.registerScript = true;\n      /**\r\n       * Emitted when paypal script is loaded\r\n       */\n\n      this.scriptLoaded = new EventEmitter();\n      this.ngUnsubscribe = new Subject();\n      /**\r\n       * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n       */\n\n      this.initializePayPal = true;\n    }\n\n    set payPalButtonContainer(content) {\n      this.payPalButtonContainerElem = content;\n    }\n\n    ngOnChanges(changes) {\n      if (!this.payPalButtonContainerId) {\n        this.payPalButtonContainerId = this.generateElementId();\n      } // first time config setup\n\n\n      const config = this.config;\n\n      if (changes.config.isFirstChange()) {\n        if (config && this.registerScript) {\n          this.initPayPalScript(config, payPal => {\n            // store reference to paypal global script\n            this.payPal = payPal;\n            this.doPayPalCheck();\n          });\n        }\n      } // changes to config\n\n\n      if (!changes.config.isFirstChange()) {\n        this.reinitialize(config);\n      }\n    }\n\n    ngOnDestroy() {\n      this.paypalScriptService.destroyPayPalScript();\n      this.ngUnsubscribe.next();\n      this.ngUnsubscribe.complete();\n    }\n\n    ngAfterViewInit() {\n      this.doPayPalCheck();\n    }\n\n    customInit(payPal) {\n      this.payPal = payPal;\n      this.doPayPalCheck();\n    }\n\n    reinitialize(config) {\n      this.config = config;\n      this.payPal = undefined;\n      this.paypalScriptService.destroyPayPalScript();\n      this.payPalButtonContainerId = this.generateElementId();\n      this.initializePayPal = true;\n\n      if (this.payPalButtonContainerElem) {\n        try {\n          while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n            this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      this.cdr.detectChanges();\n\n      if (this.config) {\n        if (!this.payPal) {\n          this.initPayPalScript(this.config, payPal => {\n            // store reference to paypal global script\n            this.payPal = payPal;\n            this.doPayPalCheck();\n          });\n        } else {\n          this.doPayPalCheck();\n        }\n      }\n    }\n\n    doPayPalCheck() {\n      if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n        // make sure that id is also set\n        if (this.payPalButtonContainerElem.nativeElement.id) {\n          this.initializePayPal = false;\n          this.initPayPal(this.config, this.payPal);\n        }\n      }\n    }\n\n    initPayPalScript(config, initPayPal) {\n      this.paypalScriptService.registerPayPalScript({\n        clientId: config.clientId,\n        locale: config.advanced?.locale,\n        commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n        currency: config.currency,\n        vault: config.vault,\n        intent: config.intent,\n        funding: config.fundingSource != undefined || config.fundingSource != null ? true : false,\n        extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n      }, paypal => {\n        this.scriptLoaded.next(paypal);\n        initPayPal(paypal);\n      });\n    }\n\n    generateElementId() {\n      return `ngx-captcha-id-${this.generateGuid()}`;\n    }\n\n    initPayPal(config, paypal) {\n      // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n      this.ngZone.runOutsideAngular(() => {\n        // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n        const createOrder = (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.createOrderOnClient && config.createOrderOnServer) {\n              throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n            }\n\n            if (!config.createOrderOnClient && !config.createOrderOnServer) {\n              throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n            }\n\n            if (config.createOrderOnClient) {\n              return actions.order.create(config.createOrderOnClient(data));\n            }\n\n            if (config.createOrderOnServer) {\n              return config.createOrderOnServer(data);\n            }\n\n            throw Error(`Invalid state for 'createOrder'.`);\n          });\n        };\n\n        const createSubscription = (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.createSubscriptionOnClient) {\n              return actions.subscription.create(config.createSubscriptionOnClient(data));\n            }\n\n            return;\n          });\n        };\n\n        const onShippingChange = (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.onShippingChange) {\n              return config.onShippingChange(data, actions);\n            }\n          });\n        };\n\n        const buttonsConfig = {\n          style: config.style,\n          fundingSource: undefined,\n          onApprove: (data, actions) => {\n            return this.ngZone.run(() => {\n              if (config.onApprove) {\n                config.onApprove(data, actions);\n              } // capture on server\n\n\n              if (config.authorizeOnServer) {\n                return config.authorizeOnServer(data, actions);\n              } // capture on client\n\n\n              const onClientAuthorization = config.onClientAuthorization;\n\n              if (onClientAuthorization) {\n                actions.order.capture().then(details => {\n                  this.ngZone.run(() => {\n                    onClientAuthorization(details);\n                  });\n                });\n              }\n            });\n          },\n          onError: error => {\n            this.ngZone.run(() => {\n              if (config.onError) {\n                config.onError(error);\n              }\n            });\n          },\n          onCancel: (data, actions) => {\n            this.ngZone.run(() => {\n              if (config.onCancel) {\n                config.onCancel(data, actions);\n              }\n            });\n          },\n          onClick: (data, actions) => {\n            this.ngZone.run(() => {\n              if (config.onClick) {\n                config.onClick(data, actions);\n              }\n            });\n          },\n          onInit: (data, actions) => {\n            this.ngZone.run(() => {\n              if (config.onInit) {\n                config.onInit(data, actions);\n              }\n            });\n          },\n          // Add the functions if they've been created in the config object\n          // The API only allows one of the two to be set\n          ...((config.createOrderOnClient || config.createOrderOnServer) && {\n            createOrder\n          }),\n          ...(config.createSubscriptionOnClient && {\n            createSubscription\n          }),\n          // The onShippingChange callback cannot be used with subscriptions\n          // so we only add it if it is set\n          ...(config.onShippingChange && {\n            onShippingChange\n          })\n        };\n        let fundSource = undefined;\n\n        switch (config.fundingSource) {\n          case \"PAYPAL\":\n            fundSource = paypal.FUNDING.PAYPAL;\n            break;\n\n          case \"CARD\":\n            fundSource = paypal.FUNDING.CARD;\n            break;\n\n          case \"PAYLATER\":\n            fundSource = paypal.FUNDING.PAYLATER;\n            break;\n\n          case \"CREDIT\":\n            fundSource = paypal.FUNDING.CREDIT;\n            break;\n\n          case \"VENMO\":\n            fundSource = paypal.FUNDING.VENMO;\n            break;\n\n          default:\n            break;\n        }\n\n        if (fundSource != undefined) {\n          buttonsConfig.fundingSource = fundSource;\n          if (config.fundingSource !== \"PAYPAL\") delete buttonsConfig.style?.color;\n        }\n\n        paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n      });\n    }\n\n    generateGuid() {\n      let d = new Date().getTime(),\n          d2 = performance && performance.now && performance.now() * 1000 || 0;\n      return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n        let r = Math.random() * 16;\n\n        if (d > 0) {\n          r = (d + r) % 16 | 0;\n          d = Math.floor(d / 16);\n        } else {\n          r = (d2 + r) % 16 | 0;\n          d2 = Math.floor(d2 / 16);\n        }\n\n        return (c == \"x\" ? r : r & 0x7 | 0x8).toString(16);\n      });\n    }\n\n  }\n\n  /** @nocollapse */\n  NgxPaypalComponent.ɵfac = function NgxPaypalComponent_Factory(t) {\n    return new (t || NgxPaypalComponent)(i0.ɵɵdirectiveInject(PayPalScriptService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  /** @nocollapse */\n\n\n  NgxPaypalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxPaypalComponent,\n    selectors: [[\"ngx-paypal\"]],\n    viewQuery: function NgxPaypalComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n      }\n    },\n    inputs: {\n      config: \"config\",\n      registerScript: \"registerScript\"\n    },\n    outputs: {\n      scriptLoaded: \"scriptLoaded\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]],\n    template: function NgxPaypalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"id\", ctx.payPalButtonContainerId);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NgxPaypalComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxPayPalModule = /*#__PURE__*/(() => {\n  class NgxPayPalModule {}\n\n  /** @nocollapse */\n  NgxPayPalModule.ɵfac = function NgxPayPalModule_Factory(t) {\n    return new (t || NgxPayPalModule)();\n  };\n  /** @nocollapse */\n\n\n  NgxPayPalModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxPayPalModule\n  });\n  /** @nocollapse */\n\n  NgxPayPalModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ScriptService, PayPalScriptService],\n    imports: [CommonModule]\n  });\n  return NgxPayPalModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService }; //# sourceMappingURL=ngx-paypal.mjs.map","map":null,"metadata":{},"sourceType":"module"}